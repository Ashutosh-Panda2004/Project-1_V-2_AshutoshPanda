{
  "version": 3,
  "sources": ["../../jsep/dist/jsep.js"],
  "sourcesContent": ["/**\n * @implements {IHooks}\n */\nclass Hooks {\n\t/**\n\t * @callback HookCallback\n\t * @this {*|Jsep} this\n\t * @param {Jsep} env\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given callback to the list of callbacks for the given hook.\n\t *\n\t * The callback will be invoked when the hook it is registered for is run.\n\t *\n\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t *\n\t * @param {string|object} name The name of the hook, or an object of callbacks keyed by name\n\t * @param {HookCallback|boolean} callback The callback function which is given environment variables.\n\t * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)\n\t * @public\n\t */\n\tadd(name, callback, first) {\n\t\tif (typeof arguments[0] != 'string') {\n\t\t\t// Multiple hook callbacks, keyed by name\n\t\t\tfor (let name in arguments[0]) {\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t(Array.isArray(name) ? name : [name]).forEach(function (name) {\n\t\t\t\tthis[name] = this[name] || [];\n\n\t\t\t\tif (callback) {\n\t\t\t\t\tthis[name][first ? 'unshift' : 'push'](callback);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t/**\n\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t *\n\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t *\n\t * @param {string} name The name of the hook.\n\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t * @public\n\t */\n\trun(name, env) {\n\t\tthis[name] = this[name] || [];\n\t\tthis[name].forEach(function (callback) {\n\t\t\tcallback.call(env && env.context ? env.context : env, env);\n\t\t});\n\t}\n}\n\n/**\n * @implements {IPlugins}\n */\nclass Plugins {\n\tconstructor(jsep) {\n\t\tthis.jsep = jsep;\n\t\tthis.registered = {};\n\t}\n\n\t/**\n\t * @callback PluginSetup\n\t * @this {Jsep} jsep\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given plugin(s) to the registry\n\t *\n\t * @param {object} plugins\n\t * @param {string} plugins.name The name of the plugin\n\t * @param {PluginSetup} plugins.init The init function\n\t * @public\n\t */\n\tregister(...plugins) {\n\t\tplugins.forEach((plugin) => {\n\t\t\tif (typeof plugin !== 'object' || !plugin.name || !plugin.init) {\n\t\t\t\tthrow new Error('Invalid JSEP plugin format');\n\t\t\t}\n\t\t\tif (this.registered[plugin.name]) {\n\t\t\t\t// already registered. Ignore.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tplugin.init(this.jsep);\n\t\t\tthis.registered[plugin.name] = plugin;\n\t\t});\n\t}\n}\n\n//     JavaScript Expression Parser (JSEP) 1.3.9\n\nclass Jsep {\n\t/**\n\t * @returns {string}\n\t */\n\tstatic get version() {\n\t\t// To be filled in by the template\n\t\treturn '1.3.9';\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tstatic toString() {\n\t\treturn 'JavaScript Expression Parser (JSEP) v' + Jsep.version;\n\t};\n\n\t// ==================== CONFIG ================================\n\t/**\n\t * @method addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @returns {Jsep}\n\t */\n\tstatic addUnaryOp(op_name) {\n\t\tJsep.max_unop_len = Math.max(op_name.length, Jsep.max_unop_len);\n\t\tJsep.unary_ops[op_name] = 1;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence\n\t * @param {boolean} [isRightAssociative=false] whether operator is right-associative\n\t * @returns {Jsep}\n\t */\n\tstatic addBinaryOp(op_name, precedence, isRightAssociative) {\n\t\tJsep.max_binop_len = Math.max(op_name.length, Jsep.max_binop_len);\n\t\tJsep.binary_ops[op_name] = precedence;\n\t\tif (isRightAssociative) {\n\t\t\tJsep.right_associative.add(op_name);\n\t\t}\n\t\telse {\n\t\t\tJsep.right_associative.delete(op_name);\n\t\t}\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addIdentifierChar\n\t * @param {string} char The additional character to treat as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic addIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.add(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addLiteral\n\t * @param {string} literal_name The name of the literal to add\n\t * @param {*} literal_value The value of the literal\n\t * @returns {Jsep}\n\t */\n\tstatic addLiteral(literal_name, literal_value) {\n\t\tJsep.literals[literal_name] = literal_value;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeUnaryOp(op_name) {\n\t\tdelete Jsep.unary_ops[op_name];\n\t\tif (op_name.length === Jsep.max_unop_len) {\n\t\t\tJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\n\t\t}\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllUnaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllUnaryOps() {\n\t\tJsep.unary_ops = {};\n\t\tJsep.max_unop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeIdentifierChar\n\t * @param {string} char The additional character to stop treating as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic removeIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.delete(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeBinaryOp(op_name) {\n\t\tdelete Jsep.binary_ops[op_name];\n\n\t\tif (op_name.length === Jsep.max_binop_len) {\n\t\t\tJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\t\t}\n\t\tJsep.right_associative.delete(op_name);\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllBinaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllBinaryOps() {\n\t\tJsep.binary_ops = {};\n\t\tJsep.max_binop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeLiteral\n\t * @param {string} literal_name The name of the literal to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeLiteral(literal_name) {\n\t\tdelete Jsep.literals[literal_name];\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllLiterals\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllLiterals() {\n\t\tJsep.literals = {};\n\n\t\treturn Jsep;\n\t}\n\t// ==================== END CONFIG ============================\n\n\n\t/**\n\t * @returns {string}\n\t */\n\tget char() {\n\t\treturn this.expr.charAt(this.index);\n\t}\n\n\t/**\n\t * @returns {number}\n\t */\n\tget code() {\n\t\treturn this.expr.charCodeAt(this.index);\n\t};\n\n\n\t/**\n\t * @param {string} expr a string with the passed in express\n\t * @returns Jsep\n\t */\n\tconstructor(expr) {\n\t\t// `index` stores the character number we are currently at\n\t\t// All of the gobbles below will modify `index` as we move along\n\t\tthis.expr = expr;\n\t\tthis.index = 0;\n\t}\n\n\t/**\n\t * static top-level parser\n\t * @returns {jsep.Expression}\n\t */\n\tstatic parse(expr) {\n\t\treturn (new Jsep(expr)).parse();\n\t}\n\n\t/**\n\t * Get the longest key length of any object\n\t * @param {object} obj\n\t * @returns {number}\n\t */\n\tstatic getMaxKeyLen(obj) {\n\t\treturn Math.max(0, ...Object.keys(obj).map(k => k.length));\n\t}\n\n\t/**\n\t * `ch` is a character code in the next three functions\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isDecimalDigit(ch) {\n\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t}\n\n\t/**\n\t * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.\n\t * @param {string} op_val\n\t * @returns {number}\n\t */\n\tstatic binaryPrecedence(op_val) {\n\t\treturn Jsep.binary_ops[op_val] || 0;\n\t}\n\n\t/**\n\t * Looks for start of identifier\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierStart(ch) {\n\t\treturn  (ch >= 65 && ch <= 90) || // A...Z\n\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t(ch >= 128 && !Jsep.binary_ops[String.fromCharCode(ch)]) || // any non-ASCII that is not an operator\n\t\t\t(Jsep.additional_identifier_chars.has(String.fromCharCode(ch))); // additional characters\n\t}\n\n\t/**\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierPart(ch) {\n\t\treturn Jsep.isIdentifierStart(ch) || Jsep.isDecimalDigit(ch);\n\t}\n\n\t/**\n\t * throw error at index of the expression\n\t * @param {string} message\n\t * @throws\n\t */\n\tthrowError(message) {\n\t\tconst error = new Error(message + ' at character ' + this.index);\n\t\terror.index = this.index;\n\t\terror.description = message;\n\t\tthrow error;\n\t}\n\n\t/**\n\t * Run a given hook\n\t * @param {string} name\n\t * @param {jsep.Expression|false} [node]\n\t * @returns {?jsep.Expression}\n\t */\n\trunHook(name, node) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this, node };\n\t\t\tJsep.hooks.run(name, env);\n\t\t\treturn env.node;\n\t\t}\n\t\treturn node;\n\t}\n\n\t/**\n\t * Runs a given hook until one returns a node\n\t * @param {string} name\n\t * @returns {?jsep.Expression}\n\t */\n\tsearchHook(name) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this };\n\t\t\tJsep.hooks[name].find(function (callback) {\n\t\t\t\tcallback.call(env.context, env);\n\t\t\t\treturn env.node;\n\t\t\t});\n\t\t\treturn env.node;\n\t\t}\n\t}\n\n\t/**\n\t * Push `index` up to the next non-space character\n\t */\n\tgobbleSpaces() {\n\t\tlet ch = this.code;\n\t\t// Whitespace\n\t\twhile (ch === Jsep.SPACE_CODE\n\t\t|| ch === Jsep.TAB_CODE\n\t\t|| ch === Jsep.LF_CODE\n\t\t|| ch === Jsep.CR_CODE) {\n\t\t\tch = this.expr.charCodeAt(++this.index);\n\t\t}\n\t\tthis.runHook('gobble-spaces');\n\t}\n\n\t/**\n\t * Top-level method to parse all expressions and returns compound or single node\n\t * @returns {jsep.Expression}\n\t */\n\tparse() {\n\t\tthis.runHook('before-all');\n\t\tconst nodes = this.gobbleExpressions();\n\n\t\t// If there's only one expression just try returning the expression\n\t\tconst node = nodes.length === 1\n\t\t  ? nodes[0]\n\t\t\t: {\n\t\t\t\ttype: Jsep.COMPOUND,\n\t\t\t\tbody: nodes\n\t\t\t};\n\t\treturn this.runHook('after-all', node);\n\t}\n\n\t/**\n\t * top-level parser (but can be reused within as well)\n\t * @param {number} [untilICode]\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleExpressions(untilICode) {\n\t\tlet nodes = [], ch_i, node;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch_i = this.code;\n\n\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t// separators\n\t\t\tif (ch_i === Jsep.SEMCOL_CODE || ch_i === Jsep.COMMA_CODE) {\n\t\t\t\tthis.index++; // ignore separators\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Try to gobble each expression individually\n\t\t\t\tif (node = this.gobbleExpression()) {\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t}\n\t\t\t\telse if (this.index < this.expr.length) {\n\t\t\t\t\tif (ch_i === untilICode) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.throwError('Unexpected \"' + this.char + '\"');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * The main parsing function.\n\t * @returns {?jsep.Expression}\n\t */\n\tgobbleExpression() {\n\t\tconst node = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();\n\t\tthis.gobbleSpaces();\n\n\t\treturn this.runHook('after-expression', node);\n\t}\n\n\t/**\n\t * Search for the operation portion of the string (e.g. `+`, `===`)\n\t * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t * and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t * then, return that binary operation\n\t * @returns {string|boolean}\n\t */\n\tgobbleBinaryOp() {\n\t\tthis.gobbleSpaces();\n\t\tlet to_check = this.expr.substr(this.index, Jsep.max_binop_len);\n\t\tlet tc_len = to_check.length;\n\n\t\twhile (tc_len > 0) {\n\t\t\t// Don't accept a binary op when it is an identifier.\n\t\t\t// Binary ops that start with a identifier-valid character must be followed\n\t\t\t// by a non identifier-part valid character\n\t\t\tif (Jsep.binary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t)) {\n\t\t\t\tthis.index += tc_len;\n\t\t\t\treturn to_check;\n\t\t\t}\n\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * This function is responsible for gobbling an individual expression,\n\t * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t * @returns {?jsep.BinaryExpression}\n\t */\n\tgobbleBinaryExpression() {\n\t\tlet node, biop, prec, stack, biop_info, left, right, i, cur_biop;\n\n\t\t// First, try to get the leftmost thing\n\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t// Don't gobbleBinaryOp without a left-hand-side\n\t\tleft = this.gobbleToken();\n\t\tif (!left) {\n\t\t\treturn left;\n\t\t}\n\t\tbiop = this.gobbleBinaryOp();\n\n\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\tif (!biop) {\n\t\t\treturn left;\n\t\t}\n\n\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t// precedence structure\n\t\tbiop_info = { value: biop, prec: Jsep.binaryPrecedence(biop), right_a: Jsep.right_associative.has(biop) };\n\n\t\tright = this.gobbleToken();\n\n\t\tif (!right) {\n\t\t\tthis.throwError(\"Expected expression after \" + biop);\n\t\t}\n\n\t\tstack = [left, biop_info, right];\n\n\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\twhile ((biop = this.gobbleBinaryOp())) {\n\t\t\tprec = Jsep.binaryPrecedence(biop);\n\n\t\t\tif (prec === 0) {\n\t\t\t\tthis.index -= biop.length;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbiop_info = { value: biop, prec, right_a: Jsep.right_associative.has(biop) };\n\n\t\t\tcur_biop = biop;\n\n\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\tconst comparePrev = prev => biop_info.right_a && prev.right_a\n\t\t\t\t? prec > prev.prec\n\t\t\t\t: prec <= prev.prec;\n\t\t\twhile ((stack.length > 2) && comparePrev(stack[stack.length - 2])) {\n\t\t\t\tright = stack.pop();\n\t\t\t\tbiop = stack.pop().value;\n\t\t\t\tleft = stack.pop();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\t\toperator: biop,\n\t\t\t\t\tleft,\n\t\t\t\t\tright\n\t\t\t\t};\n\t\t\t\tstack.push(node);\n\t\t\t}\n\n\t\t\tnode = this.gobbleToken();\n\n\t\t\tif (!node) {\n\t\t\t\tthis.throwError(\"Expected expression after \" + cur_biop);\n\t\t\t}\n\n\t\t\tstack.push(biop_info, node);\n\t\t}\n\n\t\ti = stack.length - 1;\n\t\tnode = stack[i];\n\n\t\twhile (i > 1) {\n\t\t\tnode = {\n\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\toperator: stack[i - 1].value,\n\t\t\t\tleft: stack[i - 2],\n\t\t\t\tright: node\n\t\t\t};\n\t\t\ti -= 2;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * An individual part of a binary expression:\n\t * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleToken() {\n\t\tlet ch, to_check, tc_len, node;\n\n\t\tthis.gobbleSpaces();\n\t\tnode = this.searchHook('gobble-token');\n\t\tif (node) {\n\t\t\treturn this.runHook('after-token', node);\n\t\t}\n\n\t\tch = this.code;\n\n\t\tif (Jsep.isDecimalDigit(ch) || ch === Jsep.PERIOD_CODE) {\n\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\treturn this.gobbleNumericLiteral();\n\t\t}\n\n\t\tif (ch === Jsep.SQUOTE_CODE || ch === Jsep.DQUOTE_CODE) {\n\t\t\t// Single or double quotes\n\t\t\tnode = this.gobbleStringLiteral();\n\t\t}\n\t\telse if (ch === Jsep.OBRACK_CODE) {\n\t\t\tnode = this.gobbleArray();\n\t\t}\n\t\telse {\n\t\t\tto_check = this.expr.substr(this.index, Jsep.max_unop_len);\n\t\t\ttc_len = to_check.length;\n\n\t\t\twhile (tc_len > 0) {\n\t\t\t\t// Don't accept an unary op when it is an identifier.\n\t\t\t\t// Unary ops that start with a identifier-valid character must be followed\n\t\t\t\t// by a non identifier-part valid character\n\t\t\t\tif (Jsep.unary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t\t)) {\n\t\t\t\t\tthis.index += tc_len;\n\t\t\t\t\tconst argument = this.gobbleToken();\n\t\t\t\t\tif (!argument) {\n\t\t\t\t\t\tthis.throwError('missing unaryOp argument');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.runHook('after-token', {\n\t\t\t\t\t\ttype: Jsep.UNARY_EXP,\n\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\targument,\n\t\t\t\t\t\tprefix: true\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t}\n\n\t\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\t\tnode = this.gobbleIdentifier();\n\t\t\t\tif (Jsep.literals.hasOwnProperty(node.name)) {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: Jsep.LITERAL,\n\t\t\t\t\t\tvalue: Jsep.literals[node.name],\n\t\t\t\t\t\traw: node.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse if (node.name === Jsep.this_str) {\n\t\t\t\t\tnode = { type: Jsep.THIS_EXP };\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) { // open parenthesis\n\t\t\t\tnode = this.gobbleGroup();\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\treturn this.runHook('after-token', false);\n\t\t}\n\n\t\tnode = this.gobbleTokenProperty(node);\n\t\treturn this.runHook('after-token', node);\n\t}\n\n\t/**\n\t * Gobble properties of of identifiers/strings/arrays/groups.\n\t * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t * It also gobbles function calls:\n\t * e.g. `Math.acos(obj.angle)`\n\t * @param {jsep.Expression} node\n\t * @returns {jsep.Expression}\n\t */\n\tgobbleTokenProperty(node) {\n\t\tthis.gobbleSpaces();\n\n\t\tlet ch = this.code;\n\t\twhile (ch === Jsep.PERIOD_CODE || ch === Jsep.OBRACK_CODE || ch === Jsep.OPAREN_CODE || ch === Jsep.QUMARK_CODE) {\n\t\t\tlet optional;\n\t\t\tif (ch === Jsep.QUMARK_CODE) {\n\t\t\t\tif (this.expr.charCodeAt(this.index + 1) !== Jsep.PERIOD_CODE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toptional = true;\n\t\t\t\tthis.index += 2;\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tch = this.code;\n\t\t\t}\n\t\t\tthis.index++;\n\n\t\t\tif (ch === Jsep.OBRACK_CODE) {\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: true,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleExpression()\n\t\t\t\t};\n\t\t\t\tif (!node.property) {\n\t\t\t\t\tthis.throwError('Unexpected \"' + this.char + '\"');\n\t\t\t\t}\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tch = this.code;\n\t\t\t\tif (ch !== Jsep.CBRACK_CODE) {\n\t\t\t\t\tthis.throwError('Unclosed [');\n\t\t\t\t}\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) {\n\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.CALL_EXP,\n\t\t\t\t\t'arguments': this.gobbleArguments(Jsep.CPAREN_CODE),\n\t\t\t\t\tcallee: node\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if (ch === Jsep.PERIOD_CODE || optional) {\n\t\t\t\tif (optional) {\n\t\t\t\t\tthis.index--;\n\t\t\t\t}\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: false,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleIdentifier(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (optional) {\n\t\t\t\tnode.optional = true;\n\t\t\t} // else leave undefined for compatibility with esprima\n\n\t\t\tthis.gobbleSpaces();\n\t\t\tch = this.code;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleNumericLiteral() {\n\t\tlet number = '', ch, chCode;\n\n\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t}\n\n\t\tif (this.code === Jsep.PERIOD_CODE) { // can start with a decimal marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\t\t}\n\n\t\tch = this.char;\n\n\t\tif (ch === 'e' || ch === 'E') { // exponent marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\tch = this.char;\n\n\t\t\tif (ch === '+' || ch === '-') { // exponent sign\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) { // exponent itself\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\tif (!Jsep.isDecimalDigit(this.expr.charCodeAt(this.index - 1)) ) {\n\t\t\t\tthis.throwError('Expected exponent (' + number + this.char + ')');\n\t\t\t}\n\t\t}\n\n\t\tchCode = this.code;\n\n\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\tif (Jsep.isIdentifierStart(chCode)) {\n\t\t\tthis.throwError('Variable names cannot start with a number (' +\n\t\t\t\tnumber + this.char + ')');\n\t\t}\n\t\telse if (chCode === Jsep.PERIOD_CODE || (number.length === 1 && number.charCodeAt(0) === Jsep.PERIOD_CODE)) {\n\t\t\tthis.throwError('Unexpected period');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: parseFloat(number),\n\t\t\traw: number\n\t\t};\n\t}\n\n\t/**\n\t * Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleStringLiteral() {\n\t\tlet str = '';\n\t\tconst startIndex = this.index;\n\t\tconst quote = this.expr.charAt(this.index++);\n\t\tlet closed = false;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tlet ch = this.expr.charAt(this.index++);\n\n\t\t\tif (ch === quote) {\n\t\t\t\tclosed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch === '\\\\') {\n\t\t\t\t// Check for all of the common escape codes\n\t\t\t\tch = this.expr.charAt(this.index++);\n\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\tdefault : str += ch;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Unclosed quote after \"' + str + '\"');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: str,\n\t\t\traw: this.expr.substring(startIndex, this.index),\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles only identifiers\n\t * e.g.: `foo`, `_value`, `$x1`\n\t * Also, this function checks if that identifier is a literal:\n\t * (e.g. `true`, `false`, `null`) or `this`\n\t * @returns {jsep.Identifier}\n\t */\n\tgobbleIdentifier() {\n\t\tlet ch = this.code, start = this.index;\n\n\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\tthis.index++;\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unexpected ' + this.char);\n\t\t}\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch = this.code;\n\n\t\t\tif (Jsep.isIdentifierPart(ch)) {\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttype: Jsep.IDENTIFIER,\n\t\t\tname: this.expr.slice(start, this.index),\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles a list of arguments within the context of a function call\n\t * or array literal. This function also assumes that the opening character\n\t * `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t * until the terminator character `)` or `]` is encountered.\n\t * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t * @param {number} termination\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleArguments(termination) {\n\t\tconst args = [];\n\t\tlet closed = false;\n\t\tlet separator_count = 0;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tthis.gobbleSpaces();\n\t\t\tlet ch_i = this.code;\n\n\t\t\tif (ch_i === termination) { // done parsing\n\t\t\t\tclosed = true;\n\t\t\t\tthis.index++;\n\n\t\t\t\tif (termination === Jsep.CPAREN_CODE && separator_count && separator_count >= args.length){\n\t\t\t\t\tthis.throwError('Unexpected token ' + String.fromCharCode(termination));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch_i === Jsep.COMMA_CODE) { // between expressions\n\t\t\t\tthis.index++;\n\t\t\t\tseparator_count++;\n\n\t\t\t\tif (separator_count !== args.length) { // missing argument\n\t\t\t\t\tif (termination === Jsep.CPAREN_CODE) {\n\t\t\t\t\t\tthis.throwError('Unexpected token ,');\n\t\t\t\t\t}\n\t\t\t\t\telse if (termination === Jsep.CBRACK_CODE) {\n\t\t\t\t\t\tfor (let arg = args.length; arg < separator_count; arg++) {\n\t\t\t\t\t\t\targs.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (args.length !== separator_count && separator_count !== 0) {\n\t\t\t\t// NOTE: `&& separator_count !== 0` allows for either all commas, or all spaces as arguments\n\t\t\t\tthis.throwError('Expected comma');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst node = this.gobbleExpression();\n\n\t\t\t\tif (!node || node.type === Jsep.COMPOUND) {\n\t\t\t\t\tthis.throwError('Expected comma');\n\t\t\t\t}\n\n\t\t\t\targs.push(node);\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Expected ' + String.fromCharCode(termination));\n\t\t}\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * Responsible for parsing a group of things within parentheses `()`\n\t * that have no identifier in front (so not a function call)\n\t * This function assumes that it needs to gobble the opening parenthesis\n\t * and then tries to gobble everything within that parenthesis, assuming\n\t * that the next thing it should see is the close parenthesis. If not,\n\t * then the expression probably doesn't have a `)`\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleGroup() {\n\t\tthis.index++;\n\t\tlet nodes = this.gobbleExpressions(Jsep.CPAREN_CODE);\n\t\tif (this.code === Jsep.CPAREN_CODE) {\n\t\t\tthis.index++;\n\t\t\tif (nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t}\n\t\t\telse if (!nodes.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\ttype: Jsep.SEQUENCE_EXP,\n\t\t\t\t\texpressions: nodes,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unclosed (');\n\t\t}\n\t}\n\n\t/**\n\t * Responsible for parsing Array literals `[1, 2, 3]`\n\t * This function assumes that it needs to gobble the opening bracket\n\t * and then tries to gobble the expressions as arguments.\n\t * @returns {jsep.ArrayExpression}\n\t */\n\tgobbleArray() {\n\t\tthis.index++;\n\n\t\treturn {\n\t\t\ttype: Jsep.ARRAY_EXP,\n\t\t\telements: this.gobbleArguments(Jsep.CBRACK_CODE)\n\t\t};\n\t}\n}\n\n// Static fields:\nconst hooks = new Hooks();\nObject.assign(Jsep, {\n\thooks,\n\tplugins: new Plugins(Jsep),\n\n\t// Node Types\n\t// ----------\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tCOMPOUND:        'Compound',\n\tSEQUENCE_EXP:    'SequenceExpression',\n\tIDENTIFIER:      'Identifier',\n\tMEMBER_EXP:      'MemberExpression',\n\tLITERAL:         'Literal',\n\tTHIS_EXP:        'ThisExpression',\n\tCALL_EXP:        'CallExpression',\n\tUNARY_EXP:       'UnaryExpression',\n\tBINARY_EXP:      'BinaryExpression',\n\tARRAY_EXP:       'ArrayExpression',\n\n\tTAB_CODE:    9,\n\tLF_CODE:     10,\n\tCR_CODE:     13,\n\tSPACE_CODE:  32,\n\tPERIOD_CODE: 46, // '.'\n\tCOMMA_CODE:  44, // ','\n\tSQUOTE_CODE: 39, // single quote\n\tDQUOTE_CODE: 34, // double quotes\n\tOPAREN_CODE: 40, // (\n\tCPAREN_CODE: 41, // )\n\tOBRACK_CODE: 91, // [\n\tCBRACK_CODE: 93, // ]\n\tQUMARK_CODE: 63, // ?\n\tSEMCOL_CODE: 59, // ;\n\tCOLON_CODE:  58, // :\n\n\n\t// Operations\n\t// ----------\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `1` (it really doesn't matter)\n\tunary_ops: {\n\t\t'-': 1,\n\t\t'!': 1,\n\t\t'~': 1,\n\t\t'+': 1\n\t},\n\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference (higher number = higher precedence)\n\t// see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\tbinary_ops: {\n\t\t'||': 1, '&&': 2, '|': 3, '^': 4, '&': 5,\n\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t'<': 7, '>': 7, '<=': 7, '>=': 7,\n\t\t'<<': 8, '>>': 8, '>>>': 8,\n\t\t'+': 9, '-': 9,\n\t\t'*': 10, '/': 10, '%': 10\n\t},\n\n\t// sets specific binary_ops as right-associative\n\tright_associative: new Set(),\n\n\t// Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)\n\tadditional_identifier_chars: new Set(['$', '_']),\n\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\tliterals: {\n\t\t'true': true,\n\t\t'false': false,\n\t\t'null': null\n\t},\n\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\tthis_str: 'this',\n});\nJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\nJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\n// Backward Compatibility:\nconst jsep = expr => (new Jsep(expr)).parse();\nconst stdClassProps = Object.getOwnPropertyNames(class Test{});\nObject.getOwnPropertyNames(Jsep)\n\t.filter(prop => !stdClassProps.includes(prop) && jsep[prop] === undefined)\n\t.forEach((m) => {\n\t\tjsep[m] = Jsep[m];\n\t});\njsep.Jsep = Jsep; // allows for const { Jsep } = require('jsep');\n\nconst CONDITIONAL_EXP = 'ConditionalExpression';\n\nvar ternary = {\n\tname: 'ternary',\n\n\tinit(jsep) {\n\t\t// Ternary expression: test ? consequent : alternate\n\t\tjsep.hooks.add('after-expression', function gobbleTernary(env) {\n\t\t\tif (env.node && this.code === jsep.QUMARK_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst test = env.node;\n\t\t\t\tconst consequent = this.gobbleExpression();\n\n\t\t\t\tif (!consequent) {\n\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t}\n\n\t\t\t\tthis.gobbleSpaces();\n\n\t\t\t\tif (this.code === jsep.COLON_CODE) {\n\t\t\t\t\tthis.index++;\n\t\t\t\t\tconst alternate = this.gobbleExpression();\n\n\t\t\t\t\tif (!alternate) {\n\t\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate,\n\t\t\t\t\t};\n\n\t\t\t\t\t// check for operators of higher priority than ternary (i.e. assignment)\n\t\t\t\t\t// jsep sets || at 1, and assignment at 0.9, and conditional should be between them\n\t\t\t\t\tif (test.operator && jsep.binary_ops[test.operator] <= 0.9) {\n\t\t\t\t\t\tlet newTest = test;\n\t\t\t\t\t\twhile (newTest.right.operator && jsep.binary_ops[newTest.right.operator] <= 0.9) {\n\t\t\t\t\t\t\tnewTest = newTest.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tenv.node.test = newTest.right;\n\t\t\t\t\t\tnewTest.right = env.node;\n\t\t\t\t\t\tenv.node = test;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n};\n\n// Add default plugins:\n\njsep.plugins.register(ternary);\n\nexport { Jsep, jsep as default };\n"],
  "mappings": ";;;AAGA,IAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBX,IAAI,MAAM,UAAU,OAAO;AAC1B,QAAI,OAAO,UAAU,CAAC,KAAK,UAAU;AAEpC,eAASA,SAAQ,UAAU,CAAC,GAAG;AAC9B,aAAK,IAAIA,OAAM,UAAU,CAAC,EAAEA,KAAI,GAAG,UAAU,CAAC,CAAC;AAAA,MAChD;AAAA,IACD,OACK;AACJ,OAAC,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI,GAAG,QAAQ,SAAUA,OAAM;AAC7D,aAAKA,KAAI,IAAI,KAAKA,KAAI,KAAK,CAAC;AAE5B,YAAI,UAAU;AACb,eAAKA,KAAI,EAAE,QAAQ,YAAY,MAAM,EAAE,QAAQ;AAAA,QAChD;AAAA,MACD,GAAG,IAAI;AAAA,IACR;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,MAAM,KAAK;AACd,SAAK,IAAI,IAAI,KAAK,IAAI,KAAK,CAAC;AAC5B,SAAK,IAAI,EAAE,QAAQ,SAAU,UAAU;AACtC,eAAS,KAAK,OAAO,IAAI,UAAU,IAAI,UAAU,KAAK,GAAG;AAAA,IAC1D,CAAC;AAAA,EACF;AACD;AAKA,IAAM,UAAN,MAAc;AAAA,EACb,YAAYC,OAAM;AACjB,SAAK,OAAOA;AACZ,SAAK,aAAa,CAAC;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,YAAY,SAAS;AACpB,YAAQ,QAAQ,CAAC,WAAW;AAC3B,UAAI,OAAO,WAAW,YAAY,CAAC,OAAO,QAAQ,CAAC,OAAO,MAAM;AAC/D,cAAM,IAAI,MAAM,4BAA4B;AAAA,MAC7C;AACA,UAAI,KAAK,WAAW,OAAO,IAAI,GAAG;AAEjC;AAAA,MACD;AACA,aAAO,KAAK,KAAK,IAAI;AACrB,WAAK,WAAW,OAAO,IAAI,IAAI;AAAA,IAChC,CAAC;AAAA,EACF;AACD;AAIA,IAAM,OAAN,MAAM,MAAK;AAAA;AAAA;AAAA;AAAA,EAIV,WAAW,UAAU;AAEpB,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAW;AACjB,WAAO,0CAA0C,MAAK;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,SAAS;AAC1B,UAAK,eAAe,KAAK,IAAI,QAAQ,QAAQ,MAAK,YAAY;AAC9D,UAAK,UAAU,OAAO,IAAI;AAC1B,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,YAAY,SAAS,YAAY,oBAAoB;AAC3D,UAAK,gBAAgB,KAAK,IAAI,QAAQ,QAAQ,MAAK,aAAa;AAChE,UAAK,WAAW,OAAO,IAAI;AAC3B,QAAI,oBAAoB;AACvB,YAAK,kBAAkB,IAAI,OAAO;AAAA,IACnC,OACK;AACJ,YAAK,kBAAkB,OAAO,OAAO;AAAA,IACtC;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,MAAM;AAC9B,UAAK,4BAA4B,IAAI,IAAI;AACzC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,cAAc,eAAe;AAC9C,UAAK,SAAS,YAAY,IAAI;AAC9B,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,cAAc,SAAS;AAC7B,WAAO,MAAK,UAAU,OAAO;AAC7B,QAAI,QAAQ,WAAW,MAAK,cAAc;AACzC,YAAK,eAAe,MAAK,aAAa,MAAK,SAAS;AAAA,IACrD;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,oBAAoB;AAC1B,UAAK,YAAY,CAAC;AAClB,UAAK,eAAe;AAEpB,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,qBAAqB,MAAM;AACjC,UAAK,4BAA4B,OAAO,IAAI;AAC5C,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAe,SAAS;AAC9B,WAAO,MAAK,WAAW,OAAO;AAE9B,QAAI,QAAQ,WAAW,MAAK,eAAe;AAC1C,YAAK,gBAAgB,MAAK,aAAa,MAAK,UAAU;AAAA,IACvD;AACA,UAAK,kBAAkB,OAAO,OAAO;AAErC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,qBAAqB;AAC3B,UAAK,aAAa,CAAC;AACnB,UAAK,gBAAgB;AAErB,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,cAAc,cAAc;AAClC,WAAO,MAAK,SAAS,YAAY;AACjC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,oBAAoB;AAC1B,UAAK,WAAW,CAAC;AAEjB,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO;AACV,WAAO,KAAK,KAAK,OAAO,KAAK,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACV,WAAO,KAAK,KAAK,WAAW,KAAK,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,MAAM;AAGjB,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAM,MAAM;AAClB,WAAQ,IAAI,MAAK,IAAI,EAAG,MAAM;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa,KAAK;AACxB,WAAO,KAAK,IAAI,GAAG,GAAG,OAAO,KAAK,GAAG,EAAE,IAAI,OAAK,EAAE,MAAM,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAe,IAAI;AACzB,WAAQ,MAAM,MAAM,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,iBAAiB,QAAQ;AAC/B,WAAO,MAAK,WAAW,MAAM,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,IAAI;AAC5B,WAAS,MAAM,MAAM,MAAM;AAAA,IACzB,MAAM,MAAM,MAAM;AAAA,IAClB,MAAM,OAAO,CAAC,MAAK,WAAW,OAAO,aAAa,EAAE,CAAC;AAAA,IACrD,MAAK,4BAA4B,IAAI,OAAO,aAAa,EAAE,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAiB,IAAI;AAC3B,WAAO,MAAK,kBAAkB,EAAE,KAAK,MAAK,eAAe,EAAE;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,SAAS;AACnB,UAAM,QAAQ,IAAI,MAAM,UAAU,mBAAmB,KAAK,KAAK;AAC/D,UAAM,QAAQ,KAAK;AACnB,UAAM,cAAc;AACpB,UAAM;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,MAAM,MAAM;AACnB,QAAI,MAAK,MAAM,IAAI,GAAG;AACrB,YAAM,MAAM,EAAE,SAAS,MAAM,KAAK;AAClC,YAAK,MAAM,IAAI,MAAM,GAAG;AACxB,aAAO,IAAI;AAAA,IACZ;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,MAAM;AAChB,QAAI,MAAK,MAAM,IAAI,GAAG;AACrB,YAAM,MAAM,EAAE,SAAS,KAAK;AAC5B,YAAK,MAAM,IAAI,EAAE,KAAK,SAAU,UAAU;AACzC,iBAAS,KAAK,IAAI,SAAS,GAAG;AAC9B,eAAO,IAAI;AAAA,MACZ,CAAC;AACD,aAAO,IAAI;AAAA,IACZ;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACd,QAAI,KAAK,KAAK;AAEd,WAAO,OAAO,MAAK,cAChB,OAAO,MAAK,YACZ,OAAO,MAAK,WACZ,OAAO,MAAK,SAAS;AACvB,WAAK,KAAK,KAAK,WAAW,EAAE,KAAK,KAAK;AAAA,IACvC;AACA,SAAK,QAAQ,eAAe;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACP,SAAK,QAAQ,YAAY;AACzB,UAAM,QAAQ,KAAK,kBAAkB;AAGrC,UAAM,OAAO,MAAM,WAAW,IAC1B,MAAM,CAAC,IACR;AAAA,MACD,MAAM,MAAK;AAAA,MACX,MAAM;AAAA,IACP;AACD,WAAO,KAAK,QAAQ,aAAa,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,YAAY;AAC7B,QAAI,QAAQ,CAAC,GAAG,MAAM;AAEtB,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ;AACrC,aAAO,KAAK;AAIZ,UAAI,SAAS,MAAK,eAAe,SAAS,MAAK,YAAY;AAC1D,aAAK;AAAA,MACN,OACK;AAEJ,YAAI,OAAO,KAAK,iBAAiB,GAAG;AACnC,gBAAM,KAAK,IAAI;AAAA,QAGhB,WACS,KAAK,QAAQ,KAAK,KAAK,QAAQ;AACvC,cAAI,SAAS,YAAY;AACxB;AAAA,UACD;AACA,eAAK,WAAW,iBAAiB,KAAK,OAAO,GAAG;AAAA,QACjD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB;AAClB,UAAM,OAAO,KAAK,WAAW,mBAAmB,KAAK,KAAK,uBAAuB;AACjF,SAAK,aAAa;AAElB,WAAO,KAAK,QAAQ,oBAAoB,IAAI;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB;AAChB,SAAK,aAAa;AAClB,QAAI,WAAW,KAAK,KAAK,OAAO,KAAK,OAAO,MAAK,aAAa;AAC9D,QAAI,SAAS,SAAS;AAEtB,WAAO,SAAS,GAAG;AAIlB,UAAI,MAAK,WAAW,eAAe,QAAQ,MAC1C,CAAC,MAAK,kBAAkB,KAAK,IAAI,KAChC,KAAK,QAAQ,SAAS,SAAS,KAAK,KAAK,UAAU,CAAC,MAAK,iBAAiB,KAAK,KAAK,WAAW,KAAK,QAAQ,SAAS,MAAM,CAAC,IAC3H;AACF,aAAK,SAAS;AACd,eAAO;AAAA,MACR;AACA,iBAAW,SAAS,OAAO,GAAG,EAAE,MAAM;AAAA,IACvC;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAAyB;AACxB,QAAI,MAAM,MAAM,MAAM,OAAO,WAAW,MAAM,OAAO,GAAG;AAKxD,WAAO,KAAK,YAAY;AACxB,QAAI,CAAC,MAAM;AACV,aAAO;AAAA,IACR;AACA,WAAO,KAAK,eAAe;AAG3B,QAAI,CAAC,MAAM;AACV,aAAO;AAAA,IACR;AAIA,gBAAY,EAAE,OAAO,MAAM,MAAM,MAAK,iBAAiB,IAAI,GAAG,SAAS,MAAK,kBAAkB,IAAI,IAAI,EAAE;AAExG,YAAQ,KAAK,YAAY;AAEzB,QAAI,CAAC,OAAO;AACX,WAAK,WAAW,+BAA+B,IAAI;AAAA,IACpD;AAEA,YAAQ,CAAC,MAAM,WAAW,KAAK;AAG/B,WAAQ,OAAO,KAAK,eAAe,GAAI;AACtC,aAAO,MAAK,iBAAiB,IAAI;AAEjC,UAAI,SAAS,GAAG;AACf,aAAK,SAAS,KAAK;AACnB;AAAA,MACD;AAEA,kBAAY,EAAE,OAAO,MAAM,MAAM,SAAS,MAAK,kBAAkB,IAAI,IAAI,EAAE;AAE3E,iBAAW;AAGX,YAAM,cAAc,UAAQ,UAAU,WAAW,KAAK,UACnD,OAAO,KAAK,OACZ,QAAQ,KAAK;AAChB,aAAQ,MAAM,SAAS,KAAM,YAAY,MAAM,MAAM,SAAS,CAAC,CAAC,GAAG;AAClE,gBAAQ,MAAM,IAAI;AAClB,eAAO,MAAM,IAAI,EAAE;AACnB,eAAO,MAAM,IAAI;AACjB,eAAO;AAAA,UACN,MAAM,MAAK;AAAA,UACX,UAAU;AAAA,UACV;AAAA,UACA;AAAA,QACD;AACA,cAAM,KAAK,IAAI;AAAA,MAChB;AAEA,aAAO,KAAK,YAAY;AAExB,UAAI,CAAC,MAAM;AACV,aAAK,WAAW,+BAA+B,QAAQ;AAAA,MACxD;AAEA,YAAM,KAAK,WAAW,IAAI;AAAA,IAC3B;AAEA,QAAI,MAAM,SAAS;AACnB,WAAO,MAAM,CAAC;AAEd,WAAO,IAAI,GAAG;AACb,aAAO;AAAA,QACN,MAAM,MAAK;AAAA,QACX,UAAU,MAAM,IAAI,CAAC,EAAE;AAAA,QACvB,MAAM,MAAM,IAAI,CAAC;AAAA,QACjB,OAAO;AAAA,MACR;AACA,WAAK;AAAA,IACN;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACb,QAAI,IAAI,UAAU,QAAQ;AAE1B,SAAK,aAAa;AAClB,WAAO,KAAK,WAAW,cAAc;AACrC,QAAI,MAAM;AACT,aAAO,KAAK,QAAQ,eAAe,IAAI;AAAA,IACxC;AAEA,SAAK,KAAK;AAEV,QAAI,MAAK,eAAe,EAAE,KAAK,OAAO,MAAK,aAAa;AAEvD,aAAO,KAAK,qBAAqB;AAAA,IAClC;AAEA,QAAI,OAAO,MAAK,eAAe,OAAO,MAAK,aAAa;AAEvD,aAAO,KAAK,oBAAoB;AAAA,IACjC,WACS,OAAO,MAAK,aAAa;AACjC,aAAO,KAAK,YAAY;AAAA,IACzB,OACK;AACJ,iBAAW,KAAK,KAAK,OAAO,KAAK,OAAO,MAAK,YAAY;AACzD,eAAS,SAAS;AAElB,aAAO,SAAS,GAAG;AAIlB,YAAI,MAAK,UAAU,eAAe,QAAQ,MACzC,CAAC,MAAK,kBAAkB,KAAK,IAAI,KAChC,KAAK,QAAQ,SAAS,SAAS,KAAK,KAAK,UAAU,CAAC,MAAK,iBAAiB,KAAK,KAAK,WAAW,KAAK,QAAQ,SAAS,MAAM,CAAC,IAC3H;AACF,eAAK,SAAS;AACd,gBAAM,WAAW,KAAK,YAAY;AAClC,cAAI,CAAC,UAAU;AACd,iBAAK,WAAW,0BAA0B;AAAA,UAC3C;AACA,iBAAO,KAAK,QAAQ,eAAe;AAAA,YAClC,MAAM,MAAK;AAAA,YACX,UAAU;AAAA,YACV;AAAA,YACA,QAAQ;AAAA,UACT,CAAC;AAAA,QACF;AAEA,mBAAW,SAAS,OAAO,GAAG,EAAE,MAAM;AAAA,MACvC;AAEA,UAAI,MAAK,kBAAkB,EAAE,GAAG;AAC/B,eAAO,KAAK,iBAAiB;AAC7B,YAAI,MAAK,SAAS,eAAe,KAAK,IAAI,GAAG;AAC5C,iBAAO;AAAA,YACN,MAAM,MAAK;AAAA,YACX,OAAO,MAAK,SAAS,KAAK,IAAI;AAAA,YAC9B,KAAK,KAAK;AAAA,UACX;AAAA,QACD,WACS,KAAK,SAAS,MAAK,UAAU;AACrC,iBAAO,EAAE,MAAM,MAAK,SAAS;AAAA,QAC9B;AAAA,MACD,WACS,OAAO,MAAK,aAAa;AACjC,eAAO,KAAK,YAAY;AAAA,MACzB;AAAA,IACD;AAEA,QAAI,CAAC,MAAM;AACV,aAAO,KAAK,QAAQ,eAAe,KAAK;AAAA,IACzC;AAEA,WAAO,KAAK,oBAAoB,IAAI;AACpC,WAAO,KAAK,QAAQ,eAAe,IAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAAoB,MAAM;AACzB,SAAK,aAAa;AAElB,QAAI,KAAK,KAAK;AACd,WAAO,OAAO,MAAK,eAAe,OAAO,MAAK,eAAe,OAAO,MAAK,eAAe,OAAO,MAAK,aAAa;AAChH,UAAI;AACJ,UAAI,OAAO,MAAK,aAAa;AAC5B,YAAI,KAAK,KAAK,WAAW,KAAK,QAAQ,CAAC,MAAM,MAAK,aAAa;AAC9D;AAAA,QACD;AACA,mBAAW;AACX,aAAK,SAAS;AACd,aAAK,aAAa;AAClB,aAAK,KAAK;AAAA,MACX;AACA,WAAK;AAEL,UAAI,OAAO,MAAK,aAAa;AAC5B,eAAO;AAAA,UACN,MAAM,MAAK;AAAA,UACX,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,UAAU,KAAK,iBAAiB;AAAA,QACjC;AACA,YAAI,CAAC,KAAK,UAAU;AACnB,eAAK,WAAW,iBAAiB,KAAK,OAAO,GAAG;AAAA,QACjD;AACA,aAAK,aAAa;AAClB,aAAK,KAAK;AACV,YAAI,OAAO,MAAK,aAAa;AAC5B,eAAK,WAAW,YAAY;AAAA,QAC7B;AACA,aAAK;AAAA,MACN,WACS,OAAO,MAAK,aAAa;AAEjC,eAAO;AAAA,UACN,MAAM,MAAK;AAAA,UACX,aAAa,KAAK,gBAAgB,MAAK,WAAW;AAAA,UAClD,QAAQ;AAAA,QACT;AAAA,MACD,WACS,OAAO,MAAK,eAAe,UAAU;AAC7C,YAAI,UAAU;AACb,eAAK;AAAA,QACN;AACA,aAAK,aAAa;AAClB,eAAO;AAAA,UACN,MAAM,MAAK;AAAA,UACX,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,UAAU,KAAK,iBAAiB;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,UAAU;AACb,aAAK,WAAW;AAAA,MACjB;AAEA,WAAK,aAAa;AAClB,WAAK,KAAK;AAAA,IACX;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB;AACtB,QAAI,SAAS,IAAI,IAAI;AAErB,WAAO,MAAK,eAAe,KAAK,IAAI,GAAG;AACtC,gBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,IACxC;AAEA,QAAI,KAAK,SAAS,MAAK,aAAa;AACnC,gBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AAEvC,aAAO,MAAK,eAAe,KAAK,IAAI,GAAG;AACtC,kBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,MACxC;AAAA,IACD;AAEA,SAAK,KAAK;AAEV,QAAI,OAAO,OAAO,OAAO,KAAK;AAC7B,gBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AACvC,WAAK,KAAK;AAEV,UAAI,OAAO,OAAO,OAAO,KAAK;AAC7B,kBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,MACxC;AAEA,aAAO,MAAK,eAAe,KAAK,IAAI,GAAG;AACtC,kBAAU,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,MACxC;AAEA,UAAI,CAAC,MAAK,eAAe,KAAK,KAAK,WAAW,KAAK,QAAQ,CAAC,CAAC,GAAI;AAChE,aAAK,WAAW,wBAAwB,SAAS,KAAK,OAAO,GAAG;AAAA,MACjE;AAAA,IACD;AAEA,aAAS,KAAK;AAGd,QAAI,MAAK,kBAAkB,MAAM,GAAG;AACnC,WAAK,WAAW,gDACf,SAAS,KAAK,OAAO,GAAG;AAAA,IAC1B,WACS,WAAW,MAAK,eAAgB,OAAO,WAAW,KAAK,OAAO,WAAW,CAAC,MAAM,MAAK,aAAc;AAC3G,WAAK,WAAW,mBAAmB;AAAA,IACpC;AAEA,WAAO;AAAA,MACN,MAAM,MAAK;AAAA,MACX,OAAO,WAAW,MAAM;AAAA,MACxB,KAAK;AAAA,IACN;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AACrB,QAAI,MAAM;AACV,UAAM,aAAa,KAAK;AACxB,UAAM,QAAQ,KAAK,KAAK,OAAO,KAAK,OAAO;AAC3C,QAAI,SAAS;AAEb,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ;AACrC,UAAI,KAAK,KAAK,KAAK,OAAO,KAAK,OAAO;AAEtC,UAAI,OAAO,OAAO;AACjB,iBAAS;AACT;AAAA,MACD,WACS,OAAO,MAAM;AAErB,aAAK,KAAK,KAAK,OAAO,KAAK,OAAO;AAElC,gBAAQ,IAAI;AAAA,UACX,KAAK;AAAK,mBAAO;AAAM;AAAA,UACvB,KAAK;AAAK,mBAAO;AAAM;AAAA,UACvB,KAAK;AAAK,mBAAO;AAAM;AAAA,UACvB,KAAK;AAAK,mBAAO;AAAM;AAAA,UACvB,KAAK;AAAK,mBAAO;AAAM;AAAA,UACvB,KAAK;AAAK,mBAAO;AAAQ;AAAA,UACzB;AAAU,mBAAO;AAAA,QAClB;AAAA,MACD,OACK;AACJ,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,CAAC,QAAQ;AACZ,WAAK,WAAW,2BAA2B,MAAM,GAAG;AAAA,IACrD;AAEA,WAAO;AAAA,MACN,MAAM,MAAK;AAAA,MACX,OAAO;AAAA,MACP,KAAK,KAAK,KAAK,UAAU,YAAY,KAAK,KAAK;AAAA,IAChD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB;AAClB,QAAI,KAAK,KAAK,MAAM,QAAQ,KAAK;AAEjC,QAAI,MAAK,kBAAkB,EAAE,GAAG;AAC/B,WAAK;AAAA,IACN,OACK;AACJ,WAAK,WAAW,gBAAgB,KAAK,IAAI;AAAA,IAC1C;AAEA,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ;AACrC,WAAK,KAAK;AAEV,UAAI,MAAK,iBAAiB,EAAE,GAAG;AAC9B,aAAK;AAAA,MACN,OACK;AACJ;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,MACN,MAAM,MAAK;AAAA,MACX,MAAM,KAAK,KAAK,MAAM,OAAO,KAAK,KAAK;AAAA,IACxC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgB,aAAa;AAC5B,UAAM,OAAO,CAAC;AACd,QAAI,SAAS;AACb,QAAI,kBAAkB;AAEtB,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ;AACrC,WAAK,aAAa;AAClB,UAAI,OAAO,KAAK;AAEhB,UAAI,SAAS,aAAa;AACzB,iBAAS;AACT,aAAK;AAEL,YAAI,gBAAgB,MAAK,eAAe,mBAAmB,mBAAmB,KAAK,QAAO;AACzF,eAAK,WAAW,sBAAsB,OAAO,aAAa,WAAW,CAAC;AAAA,QACvE;AAEA;AAAA,MACD,WACS,SAAS,MAAK,YAAY;AAClC,aAAK;AACL;AAEA,YAAI,oBAAoB,KAAK,QAAQ;AACpC,cAAI,gBAAgB,MAAK,aAAa;AACrC,iBAAK,WAAW,oBAAoB;AAAA,UACrC,WACS,gBAAgB,MAAK,aAAa;AAC1C,qBAAS,MAAM,KAAK,QAAQ,MAAM,iBAAiB,OAAO;AACzD,mBAAK,KAAK,IAAI;AAAA,YACf;AAAA,UACD;AAAA,QACD;AAAA,MACD,WACS,KAAK,WAAW,mBAAmB,oBAAoB,GAAG;AAElE,aAAK,WAAW,gBAAgB;AAAA,MACjC,OACK;AACJ,cAAM,OAAO,KAAK,iBAAiB;AAEnC,YAAI,CAAC,QAAQ,KAAK,SAAS,MAAK,UAAU;AACzC,eAAK,WAAW,gBAAgB;AAAA,QACjC;AAEA,aAAK,KAAK,IAAI;AAAA,MACf;AAAA,IACD;AAEA,QAAI,CAAC,QAAQ;AACZ,WAAK,WAAW,cAAc,OAAO,aAAa,WAAW,CAAC;AAAA,IAC/D;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAc;AACb,SAAK;AACL,QAAI,QAAQ,KAAK,kBAAkB,MAAK,WAAW;AACnD,QAAI,KAAK,SAAS,MAAK,aAAa;AACnC,WAAK;AACL,UAAI,MAAM,WAAW,GAAG;AACvB,eAAO,MAAM,CAAC;AAAA,MACf,WACS,CAAC,MAAM,QAAQ;AACvB,eAAO;AAAA,MACR,OACK;AACJ,eAAO;AAAA,UACN,MAAM,MAAK;AAAA,UACX,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD,OACK;AACJ,WAAK,WAAW,YAAY;AAAA,IAC7B;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc;AACb,SAAK;AAEL,WAAO;AAAA,MACN,MAAM,MAAK;AAAA,MACX,UAAU,KAAK,gBAAgB,MAAK,WAAW;AAAA,IAChD;AAAA,EACD;AACD;AAGA,IAAM,QAAQ,IAAI,MAAM;AACxB,OAAO,OAAO,MAAM;AAAA,EACnB;AAAA,EACA,SAAS,IAAI,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,UAAiB;AAAA,EACjB,cAAiB;AAAA,EACjB,YAAiB;AAAA,EACjB,YAAiB;AAAA,EACjB,SAAiB;AAAA,EACjB,UAAiB;AAAA,EACjB,UAAiB;AAAA,EACjB,WAAiB;AAAA,EACjB,YAAiB;AAAA,EACjB,WAAiB;AAAA,EAEjB,UAAa;AAAA,EACb,SAAa;AAAA,EACb,SAAa;AAAA,EACb,YAAa;AAAA,EACb,aAAa;AAAA;AAAA,EACb,YAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOb,WAAW;AAAA,IACV,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,EACN;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AAAA,IACX,MAAM;AAAA,IAAG,MAAM;AAAA,IAAG,KAAK;AAAA,IAAG,KAAK;AAAA,IAAG,KAAK;AAAA,IACvC,MAAM;AAAA,IAAG,MAAM;AAAA,IAAG,OAAO;AAAA,IAAG,OAAO;AAAA,IACnC,KAAK;AAAA,IAAG,KAAK;AAAA,IAAG,MAAM;AAAA,IAAG,MAAM;AAAA,IAC/B,MAAM;AAAA,IAAG,MAAM;AAAA,IAAG,OAAO;AAAA,IACzB,KAAK;AAAA,IAAG,KAAK;AAAA,IACb,KAAK;AAAA,IAAI,KAAK;AAAA,IAAI,KAAK;AAAA,EACxB;AAAA;AAAA,EAGA,mBAAmB,oBAAI,IAAI;AAAA;AAAA,EAG3B,6BAA6B,oBAAI,IAAI,CAAC,KAAK,GAAG,CAAC;AAAA;AAAA;AAAA;AAAA,EAK/C,UAAU;AAAA,IACT,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA;AAAA,EAGA,UAAU;AACX,CAAC;AACD,KAAK,eAAe,KAAK,aAAa,KAAK,SAAS;AACpD,KAAK,gBAAgB,KAAK,aAAa,KAAK,UAAU;AAGtD,IAAM,OAAO,UAAS,IAAI,KAAK,IAAI,EAAG,MAAM;AAC5C,IAAM,gBAAgB,OAAO,oBAAoB,MAAM,KAAI;AAAC,CAAC;AAC7D,OAAO,oBAAoB,IAAI,EAC7B,OAAO,UAAQ,CAAC,cAAc,SAAS,IAAI,KAAK,KAAK,IAAI,MAAM,MAAS,EACxE,QAAQ,CAAC,MAAM;AACf,OAAK,CAAC,IAAI,KAAK,CAAC;AACjB,CAAC;AACF,KAAK,OAAO;AAEZ,IAAM,kBAAkB;AAExB,IAAI,UAAU;AAAA,EACb,MAAM;AAAA,EAEN,KAAKA,OAAM;AAEV,IAAAA,MAAK,MAAM,IAAI,oBAAoB,SAAS,cAAc,KAAK;AAC9D,UAAI,IAAI,QAAQ,KAAK,SAASA,MAAK,aAAa;AAC/C,aAAK;AACL,cAAM,OAAO,IAAI;AACjB,cAAM,aAAa,KAAK,iBAAiB;AAEzC,YAAI,CAAC,YAAY;AAChB,eAAK,WAAW,qBAAqB;AAAA,QACtC;AAEA,aAAK,aAAa;AAElB,YAAI,KAAK,SAASA,MAAK,YAAY;AAClC,eAAK;AACL,gBAAM,YAAY,KAAK,iBAAiB;AAExC,cAAI,CAAC,WAAW;AACf,iBAAK,WAAW,qBAAqB;AAAA,UACtC;AACA,cAAI,OAAO;AAAA,YACV,MAAM;AAAA,YACN;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAIA,cAAI,KAAK,YAAYA,MAAK,WAAW,KAAK,QAAQ,KAAK,KAAK;AAC3D,gBAAI,UAAU;AACd,mBAAO,QAAQ,MAAM,YAAYA,MAAK,WAAW,QAAQ,MAAM,QAAQ,KAAK,KAAK;AAChF,wBAAU,QAAQ;AAAA,YACnB;AACA,gBAAI,KAAK,OAAO,QAAQ;AACxB,oBAAQ,QAAQ,IAAI;AACpB,gBAAI,OAAO;AAAA,UACZ;AAAA,QACD,OACK;AACJ,eAAK,WAAW,YAAY;AAAA,QAC7B;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAIA,KAAK,QAAQ,SAAS,OAAO;",
  "names": ["name", "jsep"]
}
